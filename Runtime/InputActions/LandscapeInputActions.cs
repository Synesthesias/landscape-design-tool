//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Packages/com.synesthesias.landscape-design-tool/Runtime/InputActions/LandscapeInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @LandscapeInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @LandscapeInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""LandscapeInputActions"",
    ""maps"": [
        {
            ""name"": ""CameraMove"",
            ""id"": ""6c44055c-1e86-4691-8401-8004faff279f"",
            ""actions"": [
                {
                    ""name"": ""HorizontalMoveCameraByKeyboard"",
                    ""type"": ""Value"",
                    ""id"": ""065690cd-ff43-4aec-a1e7-2ef6b0b8b366"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""VerticalMoveCameraByKeyboard"",
                    ""type"": ""Button"",
                    ""id"": ""b386ccfb-c2ff-4674-af57-b1cacc4be928"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ParallelMoveCameraByMouse"",
                    ""type"": ""Button"",
                    ""id"": ""8bb35d44-2aa2-4344-9408-54d034a5b15a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ZoomMoveCameraByMouse"",
                    ""type"": ""Value"",
                    ""id"": ""62ed6956-d70a-441b-9180-5ee51ab8d01e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateCameraByMouse"",
                    ""type"": ""Button"",
                    ""id"": ""6d9b83dc-559e-4240-9ed7-3fd7b79472bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD-Key"",
                    ""id"": ""90e42916-ac01-4f7a-af11-8e811bca95c7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2"",
                    ""groups"": """",
                    ""action"": ""HorizontalMoveCameraByKeyboard"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a3dd2bce-84b7-4ec4-83be-a318c04fa4f7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMoveCameraByKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e7cded32-30a4-4441-9319-2f44f1e91749"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMoveCameraByKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""780e53fd-952b-47d1-b572-7c225a6c2eb1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMoveCameraByKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""05845d7e-f207-483e-8c12-7de9f3c1164c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMoveCameraByKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""UpDown-Key"",
                    ""id"": ""327a58a4-702c-472e-b99e-e6c87d0343fc"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMoveCameraByKeyboard"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b4f0aabe-8336-4165-8d0f-db649b8bccef"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMoveCameraByKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0132db88-4dc9-4349-a6d7-04db2d8f74d0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalMoveCameraByKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""aeefa704-552b-40b4-99ef-8b1c55fa696f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ParallelMoveCameraByMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ddf7760e-059b-42d7-997d-689535c06c7a"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomMoveCameraByMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c30529f-18f9-4d49-960a-c02052bb00ad"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCameraByMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ArrangeAsset"",
            ""id"": ""cc3834d5-c6b2-435a-868e-50ccccf3aea6"",
            ""actions"": [
                {
                    ""name"": ""select"",
                    ""type"": ""Button"",
                    ""id"": ""f80f366a-285a-4f4f-932d-8fe4bd837a93"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""cancel"",
                    ""type"": ""Button"",
                    ""id"": ""577543e0-8254-4172-b16e-54c783625445"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f67a630e-2b08-4991-9773-982c41dfd2e2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e50e42f2-271c-4a05-81ee-1b9674126a71"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2b4b5d4-148c-4490-8581-5067c9dc3db7"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""WalkerMove"",
            ""id"": ""aebe99bb-85bb-4c0d-9842-f0dbe4571390"",
            ""actions"": [
                {
                    ""name"": ""UpDown"",
                    ""type"": ""Button"",
                    ""id"": ""5660c2ba-88fe-4d1b-85a4-177142edf67f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WASD"",
                    ""type"": ""Value"",
                    ""id"": ""b55ffe49-aa33-46f9-8866-db35dec14c50"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Wheel"",
                    ""type"": ""Value"",
                    ""id"": ""f1a4ada4-6fb4-4596-8060-6ec96dc43372"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateCameraByMouse"",
                    ""type"": ""Button"",
                    ""id"": ""f93bf0cf-9464-4768-8357-daa4ff533765"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD-Key"",
                    ""id"": ""a227d35c-ab21-4df5-984a-5cf42ecd6401"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2"",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d31b3e47-9280-41a4-b267-8cd91d72496c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6439b026-99c6-446a-ad4f-9569a659154e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5364505f-7193-44f3-b440-e61e92260c4b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""798e8d3d-5279-4cae-8c85-7c023f7ae434"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""UpDown-Key"",
                    ""id"": ""1184da42-7d33-4ba1-a8af-6b548722aced"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""22de0f1e-87e0-45f8-97e8-5326f193e95c"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""fe0d3543-3a74-4f66-aece-1c26a4214bd9"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""620caf7c-3446-4939-b481-85320be38b9b"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Wheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88f1b815-fb81-4239-89b9-74303d443985"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCameraByMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SelectCamPos"",
            ""id"": ""6a5afb05-d2c5-4d10-85d1-ebea78386263"",
            ""actions"": [
                {
                    ""name"": ""SelectPosByInput"",
                    ""type"": ""Button"",
                    ""id"": ""4b7592f0-1a4b-42aa-a42a-9b48d15fcfb9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f95935f4-8b01-4b9b-aeba-3a202f366903"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectPosByInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LineOfSight"",
            ""id"": ""59c71817-28da-4877-add9-b4fd84e91be8"",
            ""actions"": [
                {
                    ""name"": ""select"",
                    ""type"": ""Button"",
                    ""id"": ""5475ee6e-b86c-4aaa-98d0-644f148ec417"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f99ae765-b25a-47cf-9afe-65b904a65aef"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CameraMove
        m_CameraMove = asset.FindActionMap("CameraMove", throwIfNotFound: true);
        m_CameraMove_HorizontalMoveCameraByKeyboard = m_CameraMove.FindAction("HorizontalMoveCameraByKeyboard", throwIfNotFound: true);
        m_CameraMove_VerticalMoveCameraByKeyboard = m_CameraMove.FindAction("VerticalMoveCameraByKeyboard", throwIfNotFound: true);
        m_CameraMove_ParallelMoveCameraByMouse = m_CameraMove.FindAction("ParallelMoveCameraByMouse", throwIfNotFound: true);
        m_CameraMove_ZoomMoveCameraByMouse = m_CameraMove.FindAction("ZoomMoveCameraByMouse", throwIfNotFound: true);
        m_CameraMove_RotateCameraByMouse = m_CameraMove.FindAction("RotateCameraByMouse", throwIfNotFound: true);
        // ArrangeAsset
        m_ArrangeAsset = asset.FindActionMap("ArrangeAsset", throwIfNotFound: true);
        m_ArrangeAsset_select = m_ArrangeAsset.FindAction("select", throwIfNotFound: true);
        m_ArrangeAsset_cancel = m_ArrangeAsset.FindAction("cancel", throwIfNotFound: true);
        // WalkerMove
        m_WalkerMove = asset.FindActionMap("WalkerMove", throwIfNotFound: true);
        m_WalkerMove_UpDown = m_WalkerMove.FindAction("UpDown", throwIfNotFound: true);
        m_WalkerMove_WASD = m_WalkerMove.FindAction("WASD", throwIfNotFound: true);
        m_WalkerMove_Wheel = m_WalkerMove.FindAction("Wheel", throwIfNotFound: true);
        m_WalkerMove_RotateCameraByMouse = m_WalkerMove.FindAction("RotateCameraByMouse", throwIfNotFound: true);
        // SelectCamPos
        m_SelectCamPos = asset.FindActionMap("SelectCamPos", throwIfNotFound: true);
        m_SelectCamPos_SelectPosByInput = m_SelectCamPos.FindAction("SelectPosByInput", throwIfNotFound: true);
        // LineOfSight
        m_LineOfSight = asset.FindActionMap("LineOfSight", throwIfNotFound: true);
        m_LineOfSight_select = m_LineOfSight.FindAction("select", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CameraMove
    private readonly InputActionMap m_CameraMove;
    private List<ICameraMoveActions> m_CameraMoveActionsCallbackInterfaces = new List<ICameraMoveActions>();
    private readonly InputAction m_CameraMove_HorizontalMoveCameraByKeyboard;
    private readonly InputAction m_CameraMove_VerticalMoveCameraByKeyboard;
    private readonly InputAction m_CameraMove_ParallelMoveCameraByMouse;
    private readonly InputAction m_CameraMove_ZoomMoveCameraByMouse;
    private readonly InputAction m_CameraMove_RotateCameraByMouse;
    public struct CameraMoveActions
    {
        private @LandscapeInputActions m_Wrapper;
        public CameraMoveActions(@LandscapeInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @HorizontalMoveCameraByKeyboard => m_Wrapper.m_CameraMove_HorizontalMoveCameraByKeyboard;
        public InputAction @VerticalMoveCameraByKeyboard => m_Wrapper.m_CameraMove_VerticalMoveCameraByKeyboard;
        public InputAction @ParallelMoveCameraByMouse => m_Wrapper.m_CameraMove_ParallelMoveCameraByMouse;
        public InputAction @ZoomMoveCameraByMouse => m_Wrapper.m_CameraMove_ZoomMoveCameraByMouse;
        public InputAction @RotateCameraByMouse => m_Wrapper.m_CameraMove_RotateCameraByMouse;
        public InputActionMap Get() { return m_Wrapper.m_CameraMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraMoveActions set) { return set.Get(); }
        public void AddCallbacks(ICameraMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraMoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraMoveActionsCallbackInterfaces.Add(instance);
            @HorizontalMoveCameraByKeyboard.started += instance.OnHorizontalMoveCameraByKeyboard;
            @HorizontalMoveCameraByKeyboard.performed += instance.OnHorizontalMoveCameraByKeyboard;
            @HorizontalMoveCameraByKeyboard.canceled += instance.OnHorizontalMoveCameraByKeyboard;
            @VerticalMoveCameraByKeyboard.started += instance.OnVerticalMoveCameraByKeyboard;
            @VerticalMoveCameraByKeyboard.performed += instance.OnVerticalMoveCameraByKeyboard;
            @VerticalMoveCameraByKeyboard.canceled += instance.OnVerticalMoveCameraByKeyboard;
            @ParallelMoveCameraByMouse.started += instance.OnParallelMoveCameraByMouse;
            @ParallelMoveCameraByMouse.performed += instance.OnParallelMoveCameraByMouse;
            @ParallelMoveCameraByMouse.canceled += instance.OnParallelMoveCameraByMouse;
            @ZoomMoveCameraByMouse.started += instance.OnZoomMoveCameraByMouse;
            @ZoomMoveCameraByMouse.performed += instance.OnZoomMoveCameraByMouse;
            @ZoomMoveCameraByMouse.canceled += instance.OnZoomMoveCameraByMouse;
            @RotateCameraByMouse.started += instance.OnRotateCameraByMouse;
            @RotateCameraByMouse.performed += instance.OnRotateCameraByMouse;
            @RotateCameraByMouse.canceled += instance.OnRotateCameraByMouse;
        }

        private void UnregisterCallbacks(ICameraMoveActions instance)
        {
            @HorizontalMoveCameraByKeyboard.started -= instance.OnHorizontalMoveCameraByKeyboard;
            @HorizontalMoveCameraByKeyboard.performed -= instance.OnHorizontalMoveCameraByKeyboard;
            @HorizontalMoveCameraByKeyboard.canceled -= instance.OnHorizontalMoveCameraByKeyboard;
            @VerticalMoveCameraByKeyboard.started -= instance.OnVerticalMoveCameraByKeyboard;
            @VerticalMoveCameraByKeyboard.performed -= instance.OnVerticalMoveCameraByKeyboard;
            @VerticalMoveCameraByKeyboard.canceled -= instance.OnVerticalMoveCameraByKeyboard;
            @ParallelMoveCameraByMouse.started -= instance.OnParallelMoveCameraByMouse;
            @ParallelMoveCameraByMouse.performed -= instance.OnParallelMoveCameraByMouse;
            @ParallelMoveCameraByMouse.canceled -= instance.OnParallelMoveCameraByMouse;
            @ZoomMoveCameraByMouse.started -= instance.OnZoomMoveCameraByMouse;
            @ZoomMoveCameraByMouse.performed -= instance.OnZoomMoveCameraByMouse;
            @ZoomMoveCameraByMouse.canceled -= instance.OnZoomMoveCameraByMouse;
            @RotateCameraByMouse.started -= instance.OnRotateCameraByMouse;
            @RotateCameraByMouse.performed -= instance.OnRotateCameraByMouse;
            @RotateCameraByMouse.canceled -= instance.OnRotateCameraByMouse;
        }

        public void RemoveCallbacks(ICameraMoveActions instance)
        {
            if (m_Wrapper.m_CameraMoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraMoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraMoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraMoveActions @CameraMove => new CameraMoveActions(this);

    // ArrangeAsset
    private readonly InputActionMap m_ArrangeAsset;
    private List<IArrangeAssetActions> m_ArrangeAssetActionsCallbackInterfaces = new List<IArrangeAssetActions>();
    private readonly InputAction m_ArrangeAsset_select;
    private readonly InputAction m_ArrangeAsset_cancel;
    public struct ArrangeAssetActions
    {
        private @LandscapeInputActions m_Wrapper;
        public ArrangeAssetActions(@LandscapeInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @select => m_Wrapper.m_ArrangeAsset_select;
        public InputAction @cancel => m_Wrapper.m_ArrangeAsset_cancel;
        public InputActionMap Get() { return m_Wrapper.m_ArrangeAsset; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ArrangeAssetActions set) { return set.Get(); }
        public void AddCallbacks(IArrangeAssetActions instance)
        {
            if (instance == null || m_Wrapper.m_ArrangeAssetActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ArrangeAssetActionsCallbackInterfaces.Add(instance);
            @select.started += instance.OnSelect;
            @select.performed += instance.OnSelect;
            @select.canceled += instance.OnSelect;
            @cancel.started += instance.OnCancel;
            @cancel.performed += instance.OnCancel;
            @cancel.canceled += instance.OnCancel;
        }

        private void UnregisterCallbacks(IArrangeAssetActions instance)
        {
            @select.started -= instance.OnSelect;
            @select.performed -= instance.OnSelect;
            @select.canceled -= instance.OnSelect;
            @cancel.started -= instance.OnCancel;
            @cancel.performed -= instance.OnCancel;
            @cancel.canceled -= instance.OnCancel;
        }

        public void RemoveCallbacks(IArrangeAssetActions instance)
        {
            if (m_Wrapper.m_ArrangeAssetActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IArrangeAssetActions instance)
        {
            foreach (var item in m_Wrapper.m_ArrangeAssetActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ArrangeAssetActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ArrangeAssetActions @ArrangeAsset => new ArrangeAssetActions(this);

    // WalkerMove
    private readonly InputActionMap m_WalkerMove;
    private List<IWalkerMoveActions> m_WalkerMoveActionsCallbackInterfaces = new List<IWalkerMoveActions>();
    private readonly InputAction m_WalkerMove_UpDown;
    private readonly InputAction m_WalkerMove_WASD;
    private readonly InputAction m_WalkerMove_Wheel;
    private readonly InputAction m_WalkerMove_RotateCameraByMouse;
    public struct WalkerMoveActions
    {
        private @LandscapeInputActions m_Wrapper;
        public WalkerMoveActions(@LandscapeInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @UpDown => m_Wrapper.m_WalkerMove_UpDown;
        public InputAction @WASD => m_Wrapper.m_WalkerMove_WASD;
        public InputAction @Wheel => m_Wrapper.m_WalkerMove_Wheel;
        public InputAction @RotateCameraByMouse => m_Wrapper.m_WalkerMove_RotateCameraByMouse;
        public InputActionMap Get() { return m_Wrapper.m_WalkerMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WalkerMoveActions set) { return set.Get(); }
        public void AddCallbacks(IWalkerMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_WalkerMoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WalkerMoveActionsCallbackInterfaces.Add(instance);
            @UpDown.started += instance.OnUpDown;
            @UpDown.performed += instance.OnUpDown;
            @UpDown.canceled += instance.OnUpDown;
            @WASD.started += instance.OnWASD;
            @WASD.performed += instance.OnWASD;
            @WASD.canceled += instance.OnWASD;
            @Wheel.started += instance.OnWheel;
            @Wheel.performed += instance.OnWheel;
            @Wheel.canceled += instance.OnWheel;
            @RotateCameraByMouse.started += instance.OnRotateCameraByMouse;
            @RotateCameraByMouse.performed += instance.OnRotateCameraByMouse;
            @RotateCameraByMouse.canceled += instance.OnRotateCameraByMouse;
        }

        private void UnregisterCallbacks(IWalkerMoveActions instance)
        {
            @UpDown.started -= instance.OnUpDown;
            @UpDown.performed -= instance.OnUpDown;
            @UpDown.canceled -= instance.OnUpDown;
            @WASD.started -= instance.OnWASD;
            @WASD.performed -= instance.OnWASD;
            @WASD.canceled -= instance.OnWASD;
            @Wheel.started -= instance.OnWheel;
            @Wheel.performed -= instance.OnWheel;
            @Wheel.canceled -= instance.OnWheel;
            @RotateCameraByMouse.started -= instance.OnRotateCameraByMouse;
            @RotateCameraByMouse.performed -= instance.OnRotateCameraByMouse;
            @RotateCameraByMouse.canceled -= instance.OnRotateCameraByMouse;
        }

        public void RemoveCallbacks(IWalkerMoveActions instance)
        {
            if (m_Wrapper.m_WalkerMoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWalkerMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_WalkerMoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WalkerMoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WalkerMoveActions @WalkerMove => new WalkerMoveActions(this);

    // SelectCamPos
    private readonly InputActionMap m_SelectCamPos;
    private List<ISelectCamPosActions> m_SelectCamPosActionsCallbackInterfaces = new List<ISelectCamPosActions>();
    private readonly InputAction m_SelectCamPos_SelectPosByInput;
    public struct SelectCamPosActions
    {
        private @LandscapeInputActions m_Wrapper;
        public SelectCamPosActions(@LandscapeInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectPosByInput => m_Wrapper.m_SelectCamPos_SelectPosByInput;
        public InputActionMap Get() { return m_Wrapper.m_SelectCamPos; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SelectCamPosActions set) { return set.Get(); }
        public void AddCallbacks(ISelectCamPosActions instance)
        {
            if (instance == null || m_Wrapper.m_SelectCamPosActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SelectCamPosActionsCallbackInterfaces.Add(instance);
            @SelectPosByInput.started += instance.OnSelectPosByInput;
            @SelectPosByInput.performed += instance.OnSelectPosByInput;
            @SelectPosByInput.canceled += instance.OnSelectPosByInput;
        }

        private void UnregisterCallbacks(ISelectCamPosActions instance)
        {
            @SelectPosByInput.started -= instance.OnSelectPosByInput;
            @SelectPosByInput.performed -= instance.OnSelectPosByInput;
            @SelectPosByInput.canceled -= instance.OnSelectPosByInput;
        }

        public void RemoveCallbacks(ISelectCamPosActions instance)
        {
            if (m_Wrapper.m_SelectCamPosActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISelectCamPosActions instance)
        {
            foreach (var item in m_Wrapper.m_SelectCamPosActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SelectCamPosActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SelectCamPosActions @SelectCamPos => new SelectCamPosActions(this);

    // LineOfSight
    private readonly InputActionMap m_LineOfSight;
    private List<ILineOfSightActions> m_LineOfSightActionsCallbackInterfaces = new List<ILineOfSightActions>();
    private readonly InputAction m_LineOfSight_select;
    public struct LineOfSightActions
    {
        private @LandscapeInputActions m_Wrapper;
        public LineOfSightActions(@LandscapeInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @select => m_Wrapper.m_LineOfSight_select;
        public InputActionMap Get() { return m_Wrapper.m_LineOfSight; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LineOfSightActions set) { return set.Get(); }
        public void AddCallbacks(ILineOfSightActions instance)
        {
            if (instance == null || m_Wrapper.m_LineOfSightActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LineOfSightActionsCallbackInterfaces.Add(instance);
            @select.started += instance.OnSelect;
            @select.performed += instance.OnSelect;
            @select.canceled += instance.OnSelect;
        }

        private void UnregisterCallbacks(ILineOfSightActions instance)
        {
            @select.started -= instance.OnSelect;
            @select.performed -= instance.OnSelect;
            @select.canceled -= instance.OnSelect;
        }

        public void RemoveCallbacks(ILineOfSightActions instance)
        {
            if (m_Wrapper.m_LineOfSightActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILineOfSightActions instance)
        {
            foreach (var item in m_Wrapper.m_LineOfSightActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LineOfSightActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LineOfSightActions @LineOfSight => new LineOfSightActions(this);
    public interface ICameraMoveActions
    {
        void OnHorizontalMoveCameraByKeyboard(InputAction.CallbackContext context);
        void OnVerticalMoveCameraByKeyboard(InputAction.CallbackContext context);
        void OnParallelMoveCameraByMouse(InputAction.CallbackContext context);
        void OnZoomMoveCameraByMouse(InputAction.CallbackContext context);
        void OnRotateCameraByMouse(InputAction.CallbackContext context);
    }
    public interface IArrangeAssetActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
    }
    public interface IWalkerMoveActions
    {
        void OnUpDown(InputAction.CallbackContext context);
        void OnWASD(InputAction.CallbackContext context);
        void OnWheel(InputAction.CallbackContext context);
        void OnRotateCameraByMouse(InputAction.CallbackContext context);
    }
    public interface ISelectCamPosActions
    {
        void OnSelectPosByInput(InputAction.CallbackContext context);
    }
    public interface ILineOfSightActions
    {
        void OnSelect(InputAction.CallbackContext context);
    }
}
